5. Exception & Exception Handling


Q.1. Difference between Error and Exception?
A:
Certainly! Here's a brief differentiation between Errors and Exceptions in Java:

- **Error**:
  - Errors represent serious issues that typically cannot be handled or recovered from programmatically.
  - They are usually caused by the environment in which the Java application is running, indicating problems that are beyond the control of the application.
  - Examples include `OutOfMemoryError`, `StackOverflowError`, `VirtualMachineError`, etc.
  - Attempting to handle or catch Errors is not recommended, as they usually indicate severe problems that may lead to abnormal termination of the program.

- **Exception**:
  - Exceptions represent exceptional conditions that can occur during the execution of a program and can be handled programmatically.
  - They are typically caused by the application itself due to invalid input, resource unavailability, etc.
  - Examples include `NullPointerException`, `ArithmeticException`, `FileNotFoundException`, etc.
  - Exceptions can be caught, handled, or propagated using try-catch blocks or by declaring them in the method signature (checked exceptions) and handling them using try-catch or specifying in the method's throws clause.

In summary, Errors are generally unrecoverable and indicate serious problems at the system level, while Exceptions are recoverable and represent exceptional conditions that can be handled within the program.

Q.2. Explain Java Exception Hierarchy?
A:
In Java, the Exception Hierarchy is organized in a way that allows for categorizing and handling different types of exceptions. Here's a concise overview:

1. **Throwable**:
   - At the top of the hierarchy is the `Throwable` class, which is the base class for all exceptions and errors in Java.

2. **Errors**:
   - Errors extend from the `Error` class and represent serious issues that are generally caused by the environment in which the application is running. These issues are typically not recoverable.
   - Examples include `OutOfMemoryError`, `StackOverflowError`, and `VirtualMachineError`.

3. **Exceptions**:
   - Exceptions extend from the `Exception` class and are further divided into two main types:
     - **Checked Exceptions**: These are subclasses of `Exception` that must be either caught using try-catch blocks or declared in the method's signature using the `throws` keyword. Examples include `IOException`, `ClassNotFoundException`, etc.
     - **Unchecked Exceptions (Runtime Exceptions)**: These are subclasses of `RuntimeException` and typically represent programming errors or unexpected conditions. They do not need to be caught or declared explicitly. Examples include `NullPointerException`, `ArithmeticException`, etc.

4. **Custom Exceptions**:
   - Developers can create their own exception classes by extending either `Exception` or one of its subclasses. These custom exceptions can be used to represent specific application-related exceptional conditions.

In summary, the Java Exception Hierarchy consists of `Throwable` at the root, with `Error` and `Exception` as main branches. `Error` represents critical problems at the system level, while `Exception` includes both checked and unchecked exceptions that can occur during program execution and can be handled programmatically.


Q.3. What is checked exception and unchecked exception and its
examples?
A:

- **Checked Exceptions**:
  - These are exceptions that must be either caught using try-catch blocks or declared in the method's signature using the `throws` keyword.
  - Examples: `IOException`, `ClassNotFoundException`, `SQLException`.

- **Unchecked Exceptions (Runtime Exceptions)**:
  - These exceptions do not need to be caught or declared explicitly in the method signature.
  - Examples: `NullPointerException`, `ArithmeticException`, `ArrayIndexOutOfBoundsException`.

Checked exceptions typically represent conditions that a well-written application should anticipate and recover from, whereas unchecked exceptions often indicate programming errors or unexpected conditions that may occur at runtime.


Q.4. What is difference between throw and throws keyword in java?
A:

- **`throw` keyword**:
  - Used to explicitly throw an exception within a method.
  - Used to raise a specific exception manually when a particular condition is encountered.
  - Example: `throw new SomeException();`

- **`throws` keyword**:
  - Used in the method declaration to indicate that the method might throw certain exceptions.
  - Specifies the exceptions that a method might throw, allowing callers to handle those exceptions.
  - Example: `void methodName() throws SomeException;`

In summary, `throw` is used to throw an exception explicitly within a method, while `throws` is used in method signatures to declare the exceptions that might be thrown by that method.

Q.5. How to write custom exceptions in java and why we need custom exception?
A:

1. **Writing Custom Exceptions in Java**:
   - To create a custom exception, you need to extend one of the existing exception classes (typically `Exception` or its subclasses) to define your own exception class.
   - Example:
     ```java
     public class CustomException extends Exception {
         // Custom code and constructors can be added here
     }
     ```

2. **Need for Custom Exceptions**:
   - Custom exceptions allow developers to define specific exceptional conditions in their applications that aren't adequately represented by the standard Java exception classes.
   - They provide a way to handle and distinguish unique application-specific errors or conditions.
   - Custom exceptions help in enhancing code readability, as they clearly indicate the nature of exceptional conditions specific to the application domain.
   - Example scenarios might include a specific file handling error, database-related issues, or business rule violations unique to an application.

In summary, creating custom exceptions in Java enables developers to define and handle application-specific exceptional situations that aren't covered by standard Java exceptions, thus improving code clarity and enabling more targeted error handling.


Q.6. Without having catch block, is it possible to have only try block and finally block?
A:

Yes, it is possible to have a try block followed by a finally block without including a catch block in Java. The try-finally construct is valid and often used when you don't want to handle exceptions but need to execute certain cleanup or resource releasing code in the finally block.

For example:
```java
try {
    // Code that might throw an exception
} finally {
    // Code that always executes, regardless of whether an exception occurred or not
    // Often used for resource cleanup or final operations
}
```

In this scenario, if an exception occurs within the try block, it won't be caught or handled, but the code inside the finally block will still execute. This is helpful for ensuring certain cleanup tasks are performed, like closing files, releasing resources, or finalizing operations, irrespective of whether an exception was thrown or not.

Q.7. Why we need finally block?
A:

The finally block ensures execution of code that must run regardless of whether an exception is thrown or not, allowing essential cleanup or resource releasing actions.


Q.8. What is the purpose of printStackTrace()?.
A:
`printStackTrace()` in Java quickly provides details about where and why an exception occurred by displaying a trace of method calls leading to the exception, aiding in debugging and identifying the error's source.

Q.9. What is printStackTrace(); ?
A:
`printStackTrace()` is a method in Java that belongs to the Throwable class. It is used to print the stack trace of an exception to the standard error stream (usually the console).

When an exception occurs, `printStackTrace()` outputs the following information:
- The exception class name and message.
- The sequence of method calls, showing the execution path (stack trace) where the exception occurred.
- Details such as the class, method, and line number where each method was called, helping to trace the flow of the program at the time of the exception.

It is commonly used for debugging purposes to understand and diagnose exceptions by providing information about where the exception occurred in the code and what methods were involved in the call chain leading to the exception.

Q.10. What is the return type of printStackTrace() method ?
A:
In Java, the `printStackTrace()` method does not have a return type. It is a `void` method, meaning it does not return any value. Instead, it prints the stack trace of an exception to the standard error stream without returning any specific result.

Q.11. Is it possible to keep any statements in between try , catch and finally block?
A:

Yes, it is possible to have statements between the `try`, `catch`, and `finally` blocks in Java.

- Statements can exist between `try`, `catch`, and `finally` blocks.
- These statements will execute sequentially according to the program flow.
- However, the statements placed outside these blocks might not be directly related to exception handling, so their execution isn't influenced by exception occurrences or handling.

Q.12. Is it possible to only include a try block without the catch and finally block?
A:
Yes, it is possible to have a try block without the catch or finally block in Java.

- A try block can exist independently without a catch or finally block.
- This structure might be used when you want to monitor a specific code segment for exceptions without providing explicit exception handling (catch block) or cleanup actions (finally block).
- It's essential to handle or address exceptions appropriately to ensure robust error management in the code, even if not explicitly caught within the same block.
