4. Inbuilt Classes In Java

Q.1. What is Object class and its methods?
A: In Java, the Object class is at the top of the class hierarchy. It's the base class for all other classes, which means that every class in Java is a subclass of Object either directly or indirectly.

In the `Object` class in Java, there are 11 non-static methods. Here is a list of those methods:

1. `clone()`: Creates and returns a copy of the object.

2. `equals(Object obj)`: Checks if the current object is equal to another object.

3. `finalize()`: Called by the garbage collector before an object is reclaimed by garbage collection.

4. `getClass()`: Returns the runtime class of the object.

5. `hashCode()`: Returns a hash code value for the object.

6. `notify()`: Wakes up a single thread that is waiting on this object's monitor.

7. `notifyAll()`: Wakes up all threads that are waiting on this object's monitor.

8. `toString()`: Returns a string representation of the object.

9. `wait()`: Causes the current thread to wait until another thread invokes the `notify()` method or the `notifyAll()` method for this object, or some specified amount of time has elapsed.

10. `wait(long timeout)`: Causes the current thread to wait until either another thread invokes the `notify()` method or the `notifyAll()` method for this object, or a specified amount of time has elapsed.

11. `wait(long timeout, int nanos)`: Causes the current thread to wait until another thread invokes the `notify()` method or the `notifyAll()` method for this object, or some specified amount of time has elapsed. Also, allows for an additional specified nanoseconds.

These methods define basic functionalities that every Java object can perform and can be overridden in subclasses to provide customized behavior.



Q.2. What is array and String?
A:
Sure, here are simple explanations of arrays and strings in Java:

1. **Array in Java**:
   - An array in Java is a data structure that holds a fixed-size collection of elements of the same data type.
   - It allows you to store multiple values of the same type in a single variable.
   - Arrays have a fixed length that is specified when they are created and cannot be changed afterward.
   - Elements in an array are accessed by their index, starting from 0 for the first element.
   - Example: `int[] numbers = {1, 2, 3, 4, 5};`

2. **String in Java**:
   - A `String` in Java is a sequence of characters. It represents text or a string of characters enclosed in double quotes (`" "`).
   - Strings in Java are immutable, meaning once a `String` object is created, its value cannot be changed. Any operation that appears to modify a `String` actually creates a new `String` object.
   - String objects provide various methods for manipulating strings such as `length()`, `charAt()`, `substring()`, etc.
   - Example: `String greeting = "Hello, World!";`

In simple terms, arrays are used to store a collection of elements of the same data type in a contiguous memory location, while strings are used to represent text or sequences of characters and come with various built-in methods for manipulation and handling text data.

Q.3. When we will get ArrayIndexOutOfBoundException and NegativeArraySizeException?
A:
- `ArrayIndexOutOfBoundsException` occurs when trying to access an index outside the bounds of an array (e.g., accessing an index that doesn't exist in the array).

- `NegativeArraySizeException` occurs when attempting to create an array with a negative size (i.e., specifying a negative length for an array).

Q.4. What is difference between "equals()" and "==" in java?
A:

- `equals()` is a method used to compare the contents or values of two objects for equality. It's defined in the `Object` class and can be overridden in other classes to provide customized equality comparisons.

- `==` is an operator used to check if two objects (or primitives) have the same memory reference. It checks if two variables reference the same object in memory.

In essence, `equals()` compares the content or value equivalence, while `==` compares the references or memory addresses of objects. For objects, `equals()` is often overridden to compare their content, whereas `==` checks for reference equality.

Q.5. What is String and explain atleast 6 Inbuilt methods of String?
A:

**String in Java:**
- A `String` in Java is a sequence of characters. It represents text or a string of characters enclosed in double quotes (`" "`).
- Strings in Java are immutable, meaning their value cannot be changed once created.
- They offer a variety of built-in methods for manipulating and working with textual data.

**Six Inbuilt Methods of String:**
1. `length()`: This method returns the length of the string, i.e., the number of characters in the string.
   Example:
   ```java
   String str = "Hello";
   int length = str.length(); // length will be 5
   ```

2. `charAt(int index)`: This method returns the character at a specified index within the string.
   Example:
   ```java
   String str = "Hello";
   char ch = str.charAt(1); // ch will be 'e'
   ```

3. `substring(int beginIndex)`: This method returns a substring starting from the specified `beginIndex` to the end of the string.
   Example:
   ```java
   String str = "Hello World";
   String subStr = str.substring(6); // subStr will be "World"
   ```

4. `substring(int beginIndex, int endIndex)`: This method returns a substring within the specified range from `beginIndex` to `endIndex` (excluding `endIndex`).
   Example:
   ```java
   String str = "Hello World";
   String subStr = str.substring(0, 5); // subStr will be "Hello"
   ```

5. `indexOf(String str)`: This method returns the index of the first occurrence of the specified substring within the string.
   Example:
   ```java
   String str = "Java is fun and Java is powerful";
   int index = str.indexOf("Java"); // index will be 0
   ```

6. `toUpperCase()` and `toLowerCase()`: These methods return a new string with all characters converted to upper or lower case, respectively.
   Example:
   ```java
   String str = "Hello World";
   String upperCaseStr = str.toUpperCase(); // upperCaseStr will be "HELLO WORLD"
   String lowerCaseStr = str.toLowerCase(); // lowerCaseStr will be "hello world"
   ```

These methods help in performing various operations like finding the length, extracting parts of strings, converting cases, finding specific characters or substrings within strings, etc., making string manipulation easier in Java.

Q.6. Why String is immutable?
A:

String immutability in Java means that once a String object is created with a certain value, that value cannot be changed. This is because:

- **Security & Thread Safety**: Immutability ensures that the content of a string cannot be altered once it's created, enhancing security by preventing modifications and ensuring thread safety.

- **Caching & Performance**: Immutable strings can be cached and reused, reducing memory consumption and improving performance. Also, operations on strings like concatenation create new strings without changing the originals, improving performance.

- **Hashing & Design Simplicity**: Immutability allows strings to be used reliably in hashing, simplifies code design by making behavior predictable, and prevents unexpected changes across different parts of code.

These aspects make immutable strings more secure, thread-safe, and efficient while simplifying code maintenance and enhancing overall performance in Java programs.

Q.7. String class can be inherited by any other class?
A:

In Java, the `String` class is `final`, which means it cannot be inherited by any other class. The `final` keyword prevents the extension or subclassing of the `String` class, making it immutable and ensuring that its behavior and functionalities cannot be changed or extended by creating subclasses. Therefore, no class can inherit from the `String` class in Java.

Q.8. Why String class is final?
A:

The `String` class in Java is made `final` primarily for security, performance, and design reasons:

1. **Security**: Immutability ensures that sensitive information, such as credentials or passwords stored in strings, cannot be altered once created. This prevents security vulnerabilities that might arise from tampering with critical information.

2. **Thread Safety**: Immutable strings are inherently thread-safe. They can be shared among multiple threads without worrying about concurrent modifications, reducing the risk of data inconsistency in multithreaded environments.

3. **Performance**: Strings being immutable allow for certain optimizations. For example, string literals can be stored in a string pool, conserving memory by reusing shared string instances. Additionally, certain operations like string hashing or caching can be more efficient due to immutability.

4. **Design Simplicity**: Making `String` class `final` simplifies its design and usage. Developers can rely on the expected behavior of strings across different parts of code without concerns about modification by subclasses.

In essence, making the `String` class `final` ensures its immutability, enhancing security, thread safety, performance, and simplifying code design in Java programs.

Q.9. What is String vs String buffer vs String builder?
A:

Certainly! Here's a brief comparison of `String`, `StringBuffer`, and `StringBuilder` in Java:

1. **String**:
   - Immutable: Once created, a `String` object cannot be changed. Any operation that appears to modify a string creates a new string.
   - Thread-safe: Strings are inherently thread-safe due to immutability.
   - Slower for concatenation and modifications: Concatenating or modifying strings using `+` or `concat()` creates new strings, which can be less efficient when dealing with large string manipulations.

2. **StringBuffer**:
   - Mutable: `StringBuffer` objects are mutable, meaning they can be modified after creation.
   - Thread-safe: `StringBuffer` is synchronized and thus thread-safe. Multiple threads can manipulate it without external synchronization.
   - Slower than `StringBuilder`: While offering thread safety, `StringBuffer` can be slower than `StringBuilder` due to synchronization.

3. **StringBuilder**:
   - Mutable: `StringBuilder` objects are mutable, like `StringBuffer`, allowing modifications after creation.
   - Not thread-safe: Unlike `StringBuffer`, `StringBuilder` is not synchronized, making it faster but not suitable for concurrent use by multiple threads without external synchronization.
   - Faster for concatenation and modifications: `StringBuilder` is faster than `StringBuffer` because it lacks synchronization overhead. It's more efficient for string manipulations in single-threaded scenarios.

In summary:
- Use `String` when immutability and thread safety are desired, and the content won't change frequently.
- Use `StringBuffer` when thread safety is needed for string modifications in a multithreaded environment.
- Use `StringBuilder` when thread safety is not a concern (single-threaded scenarios) and faster string manipulation is required.


Q.10. What is String vs String buffer vs String builder?
A:
