3. Object Oriented Programming

Q.1. What are the main features of OOPs in java?
A:
Object-Oriented Programming (OOP) in Java is based on four main principles, also known as the four pillars of OOP. These are:

1. **Encapsulation**:
   - Encapsulation refers to the bundling of data (attributes) and methods (functions) that operate on the data into a single unit known as an object.
   - It restricts direct access to some of the object's components and only allows access via methods, ensuring data security and preventing unintended interference.
   - In Java, encapsulation is achieved through access specifiers like public, private, protected, and getters/setters methods.

2. **Inheritance**:
   - Inheritance is a mechanism by which one class can inherit properties and behaviors (methods and fields) from another class.
   - It promotes code reusability and establishes a hierarchical relationship between classes, where subclasses (derived classes) inherit from superclasses (base classes).
   - In Java, the `extends` keyword is used to implement inheritance.

3. **Polymorphism**:
   - Polymorphism allows objects to be treated as instances of their parent class or as instances of their own class through method overriding and method overloading.
   - Method overriding enables a subclass to provide a specific implementation of a method that is already defined in its superclass.
   - Method overloading allows multiple methods with the same name but different parameters within the same class.
   - In Java, polymorphism is achieved through method overriding and method overloading.

4. **Abstraction**:
   - Abstraction refers to the process of hiding complex implementation details and showing only essential features of an object.
   - It focuses on defining clear interfaces with a set of methods that specify the behavior of objects, while hiding the internal implementation.
   - Abstract classes and interfaces are used to achieve abstraction in Java, providing a blueprint for other classes to follow.

These four principles together form the foundation of Object-Oriented Programming in Java, providing a robust and modular approach to software development, enhancing code reusability, maintainability, and scalability.

Q.2. What is Polymorphism?
A: Polymorphism, in the context of Object-Oriented Programming (OOP), refers to the ability of different classes to be treated as instances of the same class through a common interface. It allows objects of different classes to be used interchangeably based on their shared parent class or interface.

There are two types of polymorphism in Java:

1. **Compile-time Polymorphism (Method Overloading)**:
   - Method overloading allows a class to have multiple methods with the same name but different parameters.
   - The compiler determines which method to call based on the number, type, and sequence of parameters passed to the method.
   - Example:
     ```java
     class Calculator {
         public int add(int a, int b) {
             return a + b;
         }

         public double add(double a, double b) {
             return a + b;
         }
     }
     ```

2. **Run-time Polymorphism (Method Overriding)**:
   - Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.
   - It allows a subclass to have its own implementation of a method with the same signature as the one in its superclass.
   - The determination of which method to invoke happens at runtime, based on the actual object type.
   - Example:
     ```java
     class Animal {
         public void makeSound() {
             System.out.println("Some sound");
         }
     }

     class Dog extends Animal {
         public void makeSound() {
             System.out.println("Bark");
         }
     }

     class Cat extends Animal {
         public void makeSound() {
             System.out.println("Meow");
         }
     }
     ```

Polymorphism allows for more flexible and modular code by enabling code reuse, making it easier to add new classes that can be used in place of existing ones, as long as they adhere to the same interface or inheritance hierarchy. It contributes to the principle of "write once, use anywhere" in object-oriented programming.

Q.3. What is Inheritance in java?
A:

Inheritance in Java is a fundamental concept of Object-Oriented Programming (OOP) that allows a new class (called a subclass or derived class) to inherit properties and behaviors (methods and fields) from an existing class (called a superclass or base class). It enables code reuse and establishes a hierarchical relationship between classes.

Key points about inheritance in Java:

1. **Superclass and Subclass**:
   - The superclass is the existing class from which properties and behaviors are inherited.
   - The subclass is the new class that inherits properties and behaviors from the superclass.

2. **Syntax**:
   - In Java, inheritance is established using the `extends` keyword.
   - Syntax: `class Subclass extends Superclass { /* class definition */ }`

3. **Inherited and Additional Features**:
   - Subclasses inherit methods and fields (attributes) from the superclass.
   - Subclasses can also have their own additional methods and fields, as well as override superclass methods with their specific implementations.

4. **Access Modifiers**:
   - Inherited members (methods and fields) may have different access levels in the subclass based on their access modifiers (public, protected, default, private).
   - `public` and `protected` members are accessible in subclasses.

5. **"is-a" Relationship**:
   - Inheritance establishes an "is-a" relationship between classes, implying that a subclass "is a" type of its superclass.

Example:

```java
// Superclass
class Vehicle {
    protected String brand;
    protected int year;

    public void drive() {
        System.out.println("Vehicle is being driven.");
    }
}

// Subclass inheriting from Vehicle
class Car extends Vehicle {
    private int mileage;

    public void setMileage(int mileage) {
        this.mileage = mileage;
    }

    @Override
    public void drive() {
        System.out.println("Car is being driven.");
    }
}
```

In this example, `Car` is a subclass of `Vehicle`. The `Car` class inherits the `brand` and `year` attributes and the `drive()` method from the `Vehicle` class. It also adds its specific `mileage` attribute and overrides the `drive()` method with its implementation.

Q.4. What is Encapsulation in java?
A:
Encapsulation in Java is a fundamental concept of Object-Oriented Programming (OOP) that involves bundling the data (attributes/fields) and methods (functions) that operate on the data into a single unit called an object. It is used to restrict direct access to some components of an object and to protect the integrity of the data.

Key features of encapsulation in Java:

1. **Data Hiding**:
   - Encapsulation hides the internal state (attributes/fields) of an object from the outside world by making the fields private.
   - Access to the object's data is controlled through public methods (getters and setters), which act as interfaces to manipulate the data.

2. **Access Modifiers**:
   - Access modifiers like `public`, `private`, `protected`, and `default` are used to control the visibility of fields and methods.
   - Fields are often declared as `private` to prevent direct access from outside the class.

3. **Getters and Setters**:
   - Getters (accessor methods) are used to retrieve the values of private fields.
   - Setters (mutator methods) are used to modify or set the values of private fields.
   - These methods allow controlled access to the private fields, enabling validation, and enforcing business rules.

Example demonstrating encapsulation:

```java
public class Student {
    private String name;
    private int age;

    // Getter methods for accessing private fields
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    // Setter methods for modifying private fields
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        if (age > 0) { // Example validation
            this.age = age;
        } else {
            System.out.println("Invalid age.");
        }
    }
}
```

In this example, the `name` and `age` fields are declared as private, preventing direct access from outside the `Student` class. Public getter and setter methods (`getName()`, `setName()`, `getAge()`, `setAge()`) are provided to access and modify these private fields, allowing controlled and validated access to the object's data. This encapsulation helps maintain data integrity and protects the object's state from unintended modification.

Q.5. What is Abstraction and how many ways it can be achieved?
A:

Abstraction in Java is a principle of Object-Oriented Programming (OOP) that focuses on hiding complex implementation details and showing only essential features of an object. It allows the creation of simplified models that represent the relevant characteristics and behaviors of an entity without exposing the underlying complexities.

Ways to achieve abstraction in Java:

1. **Abstract Classes**:
   - An abstract class is a class that cannot be instantiated on its own and may contain abstract methods (methods without a body) that must be implemented by its subclasses.
   - Abstract classes may also contain concrete methods (methods with a body) that can be used by subclasses without modification.
   - Example:
     ```java
     abstract class Shape {
         abstract void draw(); // Abstract method
         void display() {
             System.out.println("Displaying shape");
         }
     }
     ```

2. **Interfaces**:
   - An interface is a blueprint of methods that a class must implement.
   - It contains abstract method signatures without implementations and constants (static final variables).
   - A class can implement multiple interfaces, allowing for multiple inheritance of behavior.
   - Example:
     ```java
     interface Drawable {
         void draw(); // Abstract method
     }
     ```

3. **Abstract Methods**:
   - Abstract methods in Java are methods declared without a body and marked with the `abstract` keyword.
   - They exist only in abstract classes or interfaces and must be implemented by non-abstract subclasses.
   - Example:
     ```java
     abstract void methodName(); // Abstract method
     ```

4. **Access Modifiers**:
   - Access modifiers (public, private, protected, default) help in achieving abstraction by controlling the visibility of methods and fields.
   - They restrict access to certain parts of a class, allowing only authorized parts to be accessed or modified.

Abstraction helps in managing complexity, reducing code duplication, enhancing maintainability, and allowing for easier implementation changes. It allows programmers to focus on what an object does rather than how it does it, making code more understandable and manageable.

Q.6. What is this and super calling statement?
A:
In Java, `this` and `super` are special keywords used to refer to different things within a class, especially when dealing with inheritance, constructors, and method calls.

1. **`this` keyword**:
   - `this` refers to the current instance of the class in which it is used.
   - It is often used to differentiate between instance variables and local variables when they have the same name within a method or constructor.
   - It can also be used to invoke one constructor from another constructor in the same class using `this()`.

Example usage of `this` keyword:

```java
class MyClass {
    private int number;

    public MyClass(int number) {
        this.number = number; // 'this' refers to the instance variable
    }

    public void setNumber(int number) {
        this.number = number; // 'this' is used to distinguish the instance variable from the parameter
    }
}
```

2. **`super` keyword**:
   - `super` is used to refer to the immediate parent class of a subclass.
   - It is often used to access or invoke superclass methods, constructors, or variables from within a subclass.
   - It is used to call the superclass constructor explicitly from the subclass constructor using `super()`.

Example usage of `super` keyword:

```java
class ParentClass {
    public ParentClass() {
        System.out.println("Parent class constructor");
    }
}

class ChildClass extends ParentClass {
    public ChildClass() {
        super(); // Calls the superclass constructor
        System.out.println("Child class constructor");
    }
}
```

In the context of constructors, `super()` or `this()` must be the first statement in a constructor, and if neither is explicitly specified, Java implicitly adds a `super()` call to the beginning of the constructor to invoke the superclass's no-argument constructor. If the superclass doesn’t have a no-argument constructor, an explicit `super()` call needs to be provided in the subclass constructor.

Q.7. What is constructor chaining statement?
A:

Constructor chaining refers to the process of calling one constructor from another constructor within the same class or between parent and child classes (in the context of inheritance). This technique helps to avoid code duplication by reusing constructor code.

In Java, constructor chaining is achieved using `this()` or `super()` statements as the first statement in a constructor.

There are two types of constructor chaining:

1. **Within the Same Class**:
   - A constructor can call another constructor within the same class using `this()` to avoid redundant initialization code.
   - For example, a constructor with fewer arguments can call a constructor with more arguments, initializing default values for the missing parameters.

Example of constructor chaining within the same class:

```java
class MyClass {
    private int value;

    public MyClass() {
        this(0); // Calls another constructor within the same class
    }

    public MyClass(int value) {
        this.value = value;
    }
}
```

2. **Between Parent and Child Classes**:
   - In a class hierarchy, a subclass constructor can call a superclass constructor using `super()` to initialize the inherited members.
   - If the superclass constructor requires arguments, the subclass constructor must explicitly call the appropriate superclass constructor using `super()`.

Example of constructor chaining between parent and child classes:

```java
class ParentClass {
    public ParentClass(int value) {
        // Superclass constructor
    }
}

class ChildClass extends ParentClass {
    public ChildClass() {
        super(10); // Calls the superclass constructor with an argument
    }
}
```

Constructor chaining helps ensure that initialization of objects is handled consistently and efficiently throughout the class hierarchy, reducing redundancy in code and improving code maintainability.

Q.8. Explain the difference between method overloading & method overriding?
A:
Sure, here are the key differences between method overloading and method overriding in Java:

**Method Overloading:**

1. **Definition**:
   - Method overloading occurs when multiple methods in the same class have the same name but different parameters.
   - It allows a class to have multiple methods with the same name but different signatures (different number or type of parameters).

2. **Signature**:
   - The signature of the overloaded methods must differ in the number or types of parameters, or both.

3. **Return Type**:
   - Method overloading can have methods with the same name and different return types, as long as their parameter lists differ.

4. **Static vs. Instance Methods**:
   - Overloaded methods can be either static or instance methods.

5. **Compile-Time Polymorphism**:
   - Resolution of which overloaded method to invoke is determined by the compiler at compile time, based on the method signature and the arguments passed.

Example of Method Overloading:
```java
class MyClass {
    public void display(int num) {
        // Method with int parameter
    }

    public void display(double num) {
        // Method with double parameter
    }

    public void display(String str) {
        // Method with String parameter
    }
}
```

**Method Overriding:**

1. **Definition**:
   - Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.
   - It involves redefining a method in a subclass with the same signature (name, parameters, and return type) as in the superclass.

2. **Signature**:
   - Overridden methods must have the same name, parameter list, and return type as the method in the superclass.

3. **Inheritance**:
   - Method overriding is associated with inheritance, where a subclass inherits a method from its superclass and provides its own implementation.

4. **Runtime Polymorphism**:
   - The determination of which overridden method to execute occurs at runtime based on the actual object type (dynamic binding).

Example of Method Overriding:
```java
class Animal {
    public void makeSound() {
        System.out.println("Some sound");
    }
}

class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Bark");
    }
}

class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow");
    }
}
```

In summary, method overloading involves multiple methods with the same name but different parameters within the same class, while method overriding involves redefining a method in a subclass with the same signature as in its superclass to provide a specific implementation. Overloading is determined at compile time, while overriding is determined at runtime.


Q.9. What is constructor overloading?
A:

Constructor overloading in Java refers to the ability to have multiple constructors within a class, each having a different parameter list. Similar to method overloading, where multiple methods with the same name but different parameters are defined in a class, constructor overloading allows a class to have multiple constructors with different sets of parameters.

Key points about constructor overloading:

1. **Different Parameter Lists**:
   - Constructor overloading occurs when there are multiple constructors in a class, and each constructor has a different number or types of parameters.

2. **Same Name, Different Signatures**:
   - Overloaded constructors in Java have the same name (the class name) but differ in the number or types of parameters they accept.

3. **Initialization Variations**:
   - Constructor overloading enables the creation of objects in different ways by providing various ways to initialize objects with different sets of values.

4. **No Return Type**:
   - Constructors do not have a return type, including void. They are automatically invoked when an object of the class is created.

5. **Initialization Flexibility**:
   - It allows flexibility in initializing objects based on the specific requirements of the programmer or users of the class.

Example of Constructor Overloading:

```java
class MyClass {
    private int value;

    // Constructor with no parameters
    public MyClass() {
        value = 0;
    }

    // Constructor with a single parameter
    public MyClass(int val) {
        value = val;
    }

    // Constructor with two parameters
    public MyClass(int val1, int val2) {
        value = val1 + val2;
    }

    // Getter method to retrieve the value
    public int getValue() {
        return value;
    }
}
```

In the example above, the class `MyClass` has three constructors that initialize the `value` variable in different ways. Depending on the constructor used during object creation, the `value` member variable is initialized accordingly. This flexibility allows the creation of objects with different initial states based on the constructor used.


Q.10. Is it possible to override constructor?
A:
No, it's not possible to override a constructor in Java. Constructor overriding, in the true sense of inheritance and method overriding, is not supported in Java.


Q.11. What is diamond problem in Inheritance?
A:

The "diamond problem" is a situation that occurs in programming languages that support multiple inheritance, where a class derives from two or more classes that have a common ancestor. This leads to ambiguity in the inheritance hierarchy, particularly in the case of method or attribute conflicts.

Q.12. What is Compile time Polymorphism and how it is different from run time Polymorphism?
A:

**Compile-time Polymorphism** and **Runtime Polymorphism** are two forms of polymorphism in object-oriented programming, but they occur at different stages of program execution.

1. **Compile-time Polymorphism (Static Binding / Early Binding)**:
   - Compile-time polymorphism refers to the polymorphic behavior that is resolved during compile time.
   - It is achieved through method overloading and operator overloading.
   - Method overloading allows multiple methods with the same name but different parameters to be defined in a class. The appropriate method to be called is determined by the compiler based on the method signature and arguments at compile time.
   - Compile-time polymorphism is resolved during the compilation phase before the program is executed.
   - Example: Method Overloading

```java
class Example {
    public int add(int a, int b) {
        return a + b;
    }

    public double add(double a, double b) {
        return a + b;
    }
}
```

2. **Runtime Polymorphism (Dynamic Binding / Late Binding)**:
   - Runtime polymorphism refers to the polymorphic behavior that is resolved during runtime.
   - It is achieved through method overriding.
   - Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its superclass. The determination of which method to execute is based on the actual object type at runtime.
   - Runtime polymorphism allows a subclass to override a method from its superclass and provides its own implementation of that method.
   - Example: Method Overriding

```java
class Animal {
    public void makeSound() {
        System.out.println("Some sound");
    }
}

class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Bark");
    }
}
```

**Key Difference**:
- **Compile-time Polymorphism** involves method overloading and is determined at compile time based on method signatures and argument types.
- **Runtime Polymorphism** involves method overriding and is determined at runtime based on the actual object type (dynamic binding).

Q.13. What do you understand by upcasting and downcasting?
A:

Upcasting and downcasting are fundamental concepts in object-oriented programming languages like Java, particularly concerning class hierarchies and inheritance.

1. **Upcasting**:
   - Upcasting refers to the process of casting an object of a subclass type to a superclass type.
   - It involves treating an instance of a subclass as an instance of its superclass.
   - Upcasting is implicit and does not require an explicit cast operator.
   - It is safe because a subclass object inherently contains all the properties and behaviors of its superclass.

Example of upcasting:

```java
class Animal {
    // Superclass
}

class Dog extends Animal {
    // Subclass
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog(); // Creating a Dog object
        Animal animal = dog; // Upcasting - Dog object treated as Animal object
    }
}
```

2. **Downcasting**:
   - Downcasting refers to the process of casting a superclass type to a subclass type.
   - It involves explicitly casting an object of a superclass to a subclass.
   - Downcasting is potentially unsafe and requires explicit type casting using the cast operator `(SubclassType)`.
   - It allows accessing subclass-specific methods or fields that are not available in the superclass.

Example of downcasting:

```java
class Animal {
    // Superclass
}

class Dog extends Animal {
    public void bark() {
        System.out.println("Woof!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal = new Dog(); // Upcasting
        if (animal instanceof Dog) {
            Dog dog = (Dog) animal; // Downcasting
            dog.bark(); // Accessing subclass-specific method
        }
    }
}
```

Downcasting enables the usage of subclass-specific methods or fields that are not present in the superclass. However, caution is needed as incorrect downcasting can lead to `ClassCastException` at runtime. Therefore, it's recommended to use `instanceof` to verify the object's type before performing downcasting to avoid runtime errors.

Q.14. What is variable shadowing and method shadowing?
A:

Variable shadowing and method shadowing refer to situations where a variable or method in a subclass or inner scope has the same name as a variable or method in its superclass or outer scope, thereby "shadowing" the higher-scoped entity.

1. **Variable Shadowing**:
   - Variable shadowing occurs when a variable in a more local scope (e.g., a method or block) has the same name as a variable in a wider scope (e.g., class level or outer block).
   - When a variable in an inner scope has the same name as a variable in an outer scope, the variable in the inner scope "shadows" the variable in the outer scope, making the outer variable temporarily inaccessible within that scope.
   - It doesn't affect the higher-scoped variable; it's just temporarily hidden or shadowed within the inner scope.

Example of variable shadowing:

```java
public class MyClass {
    private int num = 10; // Outer scope variable

    public void display() {
        int num = 20; // Inner scope variable (shadows the outer variable)
        System.out.println(num); // Prints the value of the inner scoped variable
    }
}
```

2. **Method Shadowing**:
   - Method shadowing occurs when a subclass defines a method with the same name and signature as a method in its superclass, thereby hiding the superclass method within the subclass.
   - When a method in a subclass has the same name and signature as a method in its superclass, the method in the subclass "shadows" or hides the method in the superclass for that specific subclass.
   - This doesn't override the superclass method as in method overriding; instead, it hides the superclass method from that particular subclass.

Example of method shadowing:

```java
class Superclass {
    public void display() {
        System.out.println("Superclass method");
    }
}

class Subclass extends Superclass {
    public void display() { // Method shadowing
        System.out.println("Subclass method");
    }
}
```

In method shadowing, the `display()` method in the subclass hides the `display()` method of the superclass when invoked within the subclass context. It does not override the superclass method; instead, it exists as a separate method specific to the subclass.

Q.15. difference between abstract class & interface?
A:

Here are the key differences between an abstract class and an interface in Java:

**Abstract Class:**

1. **Definition**:
   - An abstract class is a class declared with the `abstract` keyword.
   - It can have both abstract (methods without a body, declared with the `abstract` keyword) and concrete methods (methods with a body).
   - It can also have instance variables, constructors, and static methods.

2. **Multiple Inheritance**:
   - Java does not support multiple inheritance with abstract classes. A class can extend only one abstract class.

3. **Constructor**:
   - An abstract class can have a constructor, and it is called when a concrete subclass object is created.

4. **Method Implementation**:
   - Abstract classes can contain method implementations (concrete methods), allowing the subclass to inherit and override them.

5. **Access Modifiers**:
   - Abstract class methods can have varying access modifiers, such as public, protected, or private.

**Interface:**

1. **Definition**:
   - An interface is a reference type in Java that is declared with the `interface` keyword.
   - It contains only abstract methods and constants (public static final variables). It doesn't contain any method implementations.

2. **Multiple Inheritance**:
   - Java supports multiple inheritance with interfaces. A class can implement multiple interfaces.

3. **Constructor**:
   - Interfaces cannot have constructors because they cannot be instantiated directly. They define a contract for classes to implement.

4. **Method Implementation**:
   - Interfaces cannot contain method implementations. All methods in an interface are abstract and must be implemented by the classes that implement the interface.

5. **Access Modifiers**:
   - Interface methods are by default `public` and `abstract`. In Java 8 and later, default and static methods with implementations can also exist in interfaces.

6. **Purpose**:
   - Interfaces are used to achieve abstraction and provide a contract for classes to follow, ensuring that implementing classes define specific behaviors without specifying how they are implemented.

In summary, an abstract class can have a mixture of abstract and concrete methods, variables, constructors, and access modifiers. On the other hand, an interface can only contain abstract methods, constants, and default/static methods with no method implementations. Additionally, while a class can extend only one abstract class, it can implement multiple interfaces in Java.

Q.16. Can we write main method inside an interface in java?
A:
Yes you can run a psvm in an interface, if you're working in Java 8. Because static methods are allowed in an interface starting from Java 8.

Q.17. How we can achieve multiple Inheritance by using interface concept?
A:
In Java, multiple inheritance of behavior is achieved through interfaces. Java classes can implement multiple interfaces, allowing them to inherit abstract methods and constants from each interface. This concept enables a form of multiple inheritance for behavior.

Consider the following example to illustrate multiple inheritance using interfaces:

```java
interface InterfaceA {
    void methodA();
}

interface InterfaceB {
    void methodB();
}

class MyClass implements InterfaceA, InterfaceB {
    public void methodA() {
        System.out.println("Method from InterfaceA");
    }

    public void methodB() {
        System.out.println("Method from InterfaceB");
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.methodA(); // Output: Method from InterfaceA
        obj.methodB(); // Output: Method from InterfaceB
    }
}
```

In this example:

- `InterfaceA` declares `methodA()`.
- `InterfaceB` declares `methodB()`.
- `MyClass` implements both `InterfaceA` and `InterfaceB`.
- The `MyClass` must provide concrete implementations for all the methods declared in both interfaces (`methodA()` and `methodB()`).

By implementing multiple interfaces, `MyClass` effectively inherits behavior from both `InterfaceA` and `InterfaceB`, allowing it to provide specific implementations for methods declared in each interface.

This form of multiple inheritance through interfaces allows Java to avoid the complexities and ambiguities related to multiple inheritance of state (data) present in languages that support multiple inheritance of classes.

Q.18. What are the access modifiers?
A:
In Java, access modifiers are keywords used to control the visibility or accessibility of classes, methods, and variables in different contexts. They define the level of accessibility for classes, methods, and variables from other classes or packages.

There are four main access modifiers in Java:

1. **Public (`public`)**:
   - Public access modifier provides the highest level of accessibility.
   - A `public` class, method, or variable can be accessed from any other class or package.

2. **Private (`private`)**:
   - Private access modifier restricts accessibility within the same class.
   - A `private` method or variable is accessible only within the class it is declared in and cannot be accessed from outside that class.

3. **Protected (`protected`)**:
   - Protected access modifier allows accessibility within the same class, its subclasses (even if they are in different packages), and within the same package.
   - A `protected` method or variable can be accessed by the classes in the same package or subclasses, even if they are in different packages.

4. **Default (Package-private, No Modifier)**:
   - Default access modifier, also known as package-private, has no explicit keyword.
   - It allows accessibility within the same package only.
   - If no access modifier is specified, the default access modifier is applied.

Examples:

```java
// Public access modifier
public class PublicClass {
    public void publicMethod() {
        // Code accessible from anywhere
    }
}

// Private access modifier
class PrivateClass {
    private int privateVariable;
    private void privateMethod() {
        // Code accessible only within this class
    }
}

// Protected access modifier
class ProtectedClass {
    protected void protectedMethod() {
        // Code accessible within this class, subclasses, and same package
    }
}

// Default access modifier (Package-private)
class DefaultClass {
    void defaultMethod() {
        // Code accessible within the same package
    }
}
```

These access modifiers control the visibility of classes, methods, and variables, providing encapsulation and security by restricting or allowing access to the components of a class.

Q.19. What is marker interface?
A:
A marker interface in Java is an interface that does not contain any method declarations. Instead, it serves as a "marker" to indicate or tag a class for a specific purpose or behavior.

Marker interfaces are often referred to as "tagging" interfaces because they don't define any methods or fields; they simply mark or tag a class to inform the compiler or runtime environment about a certain capability, behavior, or contract associated with the marked class.

Some common uses of marker interfaces include:

1. **Semantic Information**:
   - Indicating that a class possesses a specific behavior, capability, or attribute.
   - For example, the `Serializable` interface in Java, used to mark classes that can be serialized.

    ```java
    import java.io.Serializable;

    class MyClass implements Serializable {
        // Class implementation
    }
    ```

2. **Framework or API Usage**:
   - Frameworks or APIs use marker interfaces to identify classes that can be treated differently or have additional functionalities provided by the framework.
   - For example, in Java, the `Cloneable` interface is a marker interface that indicates a class can support object cloning.

    ```java
    class MyCloneableClass implements Cloneable {
        // Class implementation
    }
    ```

3. **Runtime Processing**:
   - Used for conditional runtime processing or identification.
   - For instance, custom frameworks might utilize marker interfaces to recognize specific classes for custom processing or behaviors.

Marker interfaces have no methods to implement, but the presence of such interfaces affects the behavior or treatment of the marked class by other parts of the code or by the runtime environment.

However, with the introduction of annotations in Java, marker interfaces have become less common. Annotations provide a more flexible and expressive way to mark classes, methods, or fields with metadata, allowing richer and more descriptive information to be associated with elements in Java programs.








